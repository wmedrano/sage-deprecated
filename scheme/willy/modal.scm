(define-module (willy modal)
  #:export (run-modal!))
(use-modules ((willy state)       #:prefix state:)
             ((willy core buffer) #:prefix buffer:)
             ((willy core window) #:prefix window:)
             ((srfi srfi-1))
             ((srfi srfi-2))
             ((srfi srfi-111)))

(define* (run-modal! #:key modal-name prompt items on-select)
  "Run a modal that executes on-select when an item is selected."
  (state:add-task! (lambda () (run-modal-impl! modal-name prompt items on-select))))

(define* (run-modal-impl! modal-name
                          prompt
                          items
                          on-select)
  (let* ((frame-size    (unbox state:frame-size))
         (frame-width   (assoc-ref frame-size 'width))
         (frame-height  (assoc-ref frame-size 'height))
         (buffer        (buffer:make-buffer #:name     (string-concatenate
                                                        (list "*modal-" modal-name "*"))))
         (window        (window:make-window #:buffer   buffer
                                            #:features '((highlight-line . 1)
                                                         (border         . #t))
                                            #:x        (* frame-width  1/8)
                                            #:y        (* frame-height 1/16)
                                            #:width    (* frame-width  6/8)
                                            #:height   (* frame-height 14/16)))
         (target-window (state:focused-window))
         (all-items     items)
         (matches       all-items)
         (query         "")
         (restore-hook  (make-hook)))
    (define (restore!)
      (run-hook restore-hook))
    (define (item->str item)
      (string-concatenate (list " " item "\n")))
    (define (update-query! new-query)
      (set! query new-query)
      (set! matches (filter (lambda (item) (string-contains item query))
                            all-items))
      (buffer:buffer-set-string buffer
                                (string-concatenate (list prompt query "\n")))
      (for-each (lambda (item) (buffer:buffer-insert-string buffer (item->str item)))
                matches))
    (update-query! query)
    (define (handle-event event)
      (and-let* ((no-mod? (not (or (assoc-ref event 'ctrl?)
                                   (assoc-ref event 'alt?))))
                 (key (assoc-ref event 'key)))
        (cond
         ((equal? key "\n")
          (begin (restore!)
                 (when (pair? matches)
                   (state:add-task! (lambda ()
                                      (on-select (car matches)))))))
         ((equal? key "<esc>")
          (restore!))
         ((equal? key "<backspace>")
          (unless (equal? (string-length query) 0)
            (update-query! (substring query 0 (- (string-length query) 1)))))
         (else
          (update-query! (string-concatenate (list query key)))))))
    (add-hook! state:event-hook handle-event #t)
    (add-hook! restore-hook (lambda () (remove-hook! state:event-hook handle-event)))
    (state:add-window! window #:set-focus? #t)
    (add-hook! restore-hook (lambda ()
                              (state:remove-window! window)
                              (state:set-focused-window! target-window)))))
